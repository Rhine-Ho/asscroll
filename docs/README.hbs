<p align="center"><img src="https://raw.githubusercontent.com/ashthornton/asscroll/master/docs/banner.jpg"></p>

<p align="center">
    <a href="https://www.npmjs.com/package/@ashthornton/asscroll"><img src="https://img.shields.io/npm/v/@ashthornton/asscroll?color=%23F7894A" alt="NPM Version"></a>
    <img alt="npm bundle size" src="https://img.shields.io/bundlephobia/minzip/@ashthornton/asscroll?color=%23F7894A">
    <a href="https://www.jsdelivr.com/package/npm/@ashthornton/asscroll"><img alt="jsDelivr hits (npm)" src="https://img.shields.io/jsdelivr/npm/hm/@ashthornton/asscroll?color=%23F7894A"></a>
</p>

<h3 align="center"><strong>ASScroll is a Javascript hybrid smooth scroll setup that combines the<br>performance gains of virtual scroll with the reliability of native scroll.</strong></h3>

<p align="center" style="padding: 0 15%">This setup aims to be a lightweight solution that provides a consistent smooth scrolling experience across all platforms, devices and hardware.</p>

---

#### Advantages over pure virtual scroll:
- Accessible and keyboard friendly (without overriding the browser's native scroll)
- No special cases to cater for when handling manual key detection (i.e. pressing space in a form input)
- Doesn't stop working when hovering over an iframe
- Handles hardware that doesn't fire the 'wheel' event i.e. Windows trackpads in Legacy Edge
- No lag between DOM and WebGL elements on mobile, whilst retaining native inertia scroll

#### Other Features:
- Horizontal scroll
- Custom scroll bar
- Use your own external RAF loop and resize events
- Consistent lerp speeds on high refresh rate displays

_No animation features are included as there are other libraries that can be used with ASScroll. GreenSock's [ScrollTrigger](https://greensock.com/scrolltrigger/) is a great example and a demo is included below_

Demos
================
- [Zero Config Demo](https://codepen.io/ashthornton/pen/pobJRQX?editors=1010)
- [Options Demo](https://codepen.io/ashthornton/pen/YzWXZqL?editors=1010)
- [Using GSAP's ScrollTrigger with ASScroll](https://codepen.io/ashthornton/pen/PoZRwPW)
- [Using PJAX Navigation (Highway) with ASScroll](https://codepen.io/ashthornton/project/editor/AypMLG)
- [Touch-friendly DOM/WebGL Sync](https://codepen.io/ashthornton/pen/YzZzaVK)

### Sites using ASScroll
- [CLOU Architects](https://www.clouarchitects.com/)
- [Lewa House](https://lewahouse.com/)
- [Eder Anaya](https://ederanaya.me/)
- [FanFan](https://fanfan.fan/)
- [Havoc](https://www.havoc.co/)
- [Shape Studio](https://shapestudio.co.uk/)

Table of contents
=================
<!--ts-->
   * [Install](#install)
   * [Zero Config Setup](#zero-config-setup)
   * [API](#asscroll)
   * [Custom Scrollbar](#custom-scrollbar)
   * [External RAF Usage](#usage-with-external-requestanimationframe)
   * [External Resize Usage](#usage-with-external-window-resize)
   * [Touch Devices](#touch-devices)
   * [Changelog](#changelog)
<!--te-->

---


# Install
`npm i --save @ashthornton/asscroll` or `yarn add @ashthornton/asscroll`

Also available via [JSDelivr CDN](https://www.jsdelivr.com/package/npm/@ashthornton/asscroll) which you can then include with a `<script>` tag.

# Zero Config Setup

1. Add the attribute `asscroll-container` to the parent element of the content to be smooth scrolled. By default, the first child found within will be scrolled. Both of these selectors be changed in the options.

```html
<body>
    <div asscroll-container>
        <div><!-- The Y translation will be applied to this element --></div>
    </div>
</body>
```

2. Import and initialise in Javascript

```js
import ASScroll from '@ashthornton/asscroll'

const asscroll = new ASScroll()

window.addEventListener('load', () => {
    asscroll.enable()
})
```

---

{{>main}}

---

## Custom Scrollbar

When `customScrollbar` is enabled in the options, a default set of styles will get added to the page that match the following HTML:

```HTML
<div class="asscrollbar"><div class="asscrollbar__handle"><div></div></div></div>
```

This HTML will get added to your page automatically if you don't add it yourself.

You can change the classes that are used by changing the `scrollbarEl` and `scrollbarHandleEl` options.

You can use your own styles by setting the `scrollbarStyles` option to false.

---

âš  **Note**: These styles are added via JS so will only be applied after JS has loaded. This may cause the native scrollbar to show for a moment before the styles are added resulting in a jump of the page.

You can include the styles necessary to hide the native scrollbar in your CSS by copy and pasting the contents of `/css/index.css` or simply by importing them into your CSS setup. For example:

```css
@import '~@ashthornton/asscroll/css'
```

## Usage with external requestAnimationFrame
Multiple requestAnimationFrame loops causes a significant impact on performance, so ASScroll provides the option to disable its internal rAF loop in order for you to update it yourself externally.

```Javascript
const asscroll = new ASScroll({
    disableRaf: true
})

// Regular RAF loop
requestAnimationFrame(onRaf)
function onRaf() {
    asscroll.update()
    requestAnimationFrame(onRaf)
}

// Or use with GSAP's internal RAF
gsap.ticker.add(asscroll.update)
```

## Usage with external window resize
You may already have a window resize listener in your project where you get the window size for other components. Rather than let ASScroll access these window properties during its internal resize event, which causes extra browser calculations, you can pass your own values.

```Javascript
const asscroll = new ASScroll({
    disableResize: true
})

window.addEventListener('resize', () => {
    // trigger other resize logic
    const width = window.innerWidth
    const height = window.innerHeight
    asscroll.resize({ width, height })
})
```

## Touch Devices

ASScroll provides three options for handling itself on touch devices via the `touchScrollType` option:
- `'none'`: Disabled completely, falling back to native scroll whilst still providing scroll position properties
- `'transform'`: Continue to transform the scroll elements with an ease setting specifically to touch devices
- `'scrollTop'`: Utilise the `scrollTop` value of the container element when used in conjunction with CSS that prevents resizes and browser UI from toggling

The `scrollTop` option is primarily used for syncing WebGL content to the scroll position on mobile, without overriding the native inertia scroll. Some CSS will be injected automatically when this option is enabled. This CSS can be found [here](https://github.com/ashthornton/asscroll/blob/master/css/scrollTop.css).

`touchScrollType: transform` will also achieve DOM and WebGL content sync but is more expensive.

## Changelog
[View Changelog](https://github.com/ashthornton/asscroll/blob/master/CHANGELOG.md)

[![Verified on Openbase](https://badges.openbase.com/js/verified/@ashthornton/asscroll.svg?style=openbase&token=WmQF8PcdmBheXMjTKPy59HRexmMzyckLHugup8l88mU=)](https://openbase.com/js/@ashthornton/asscroll?utm_source=embedded&amp;utm_medium=badge&amp;utm_campaign=rate-badge)
